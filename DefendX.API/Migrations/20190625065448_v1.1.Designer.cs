// <auto-generated />
using System;
using DefendX.API.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DefendX.API.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190625065448_v1.1")]
    partial class v11
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.UserAggregate.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("LastLoginDate");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.AccountTypeAggregate.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("Id");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.AccountTypeAggregate.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccountTypeId");

                    b.Property<string>("Answer");

                    b.Property<string>("Question");

                    b.HasKey("Id");

                    b.HasIndex("AccountTypeId");

                    b.ToTable("Faq");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Grade");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("ServiceId");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.ToTable("Rank");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Service");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateExpired");

                    b.Property<DateTime>("DateUpdated")
                        .IsConcurrencyToken();

                    b.Property<long>("DodId");

                    b.Property<bool>("IsAuthenticated");

                    b.Property<long>("LastEditedById")
                        .IsConcurrencyToken();

                    b.Property<string>("PermitNumber")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("RankId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(30);

                    b.Property<int>("ServiceId");

                    b.Property<string>("SignatureData")
                        .IsRequired()
                        .IsUnicode(false);

                    b.Property<int?>("SponsorId");

                    b.Property<int>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("LastEditedById");

                    b.HasIndex("RankId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("SponsorId");

                    b.HasIndex("UnitId");

                    b.ToTable("SofaLicense");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicenseIssue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("IssueDate");

                    b.Property<int?>("SofaLicenseId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("SofaLicenseId");

                    b.HasIndex("UserId");

                    b.ToTable("SofaLicenseIssue");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.SofaLicensePrintQueueAggregate.PrintQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LicenseId");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("LicenseId");

                    b.HasIndex("UserId");

                    b.ToTable("PrintQueue");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.UnitsAggregate.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId");

                    b.Property<string>("UnitAbbreviation")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("Unit");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.Property<long>("DodId");

                    b.Property<int>("AccountId");

                    b.Property<int?>("RankId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int?>("ServiceId");

                    b.Property<string>("SignatureData")
                        .IsUnicode(false);

                    b.Property<int?>("UnitId");

                    b.HasKey("DodId");

                    b.HasIndex("AccountId");

                    b.HasIndex("RankId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("UnitId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.UserAggregate.Account", b =>
                {
                    b.HasOne("DefendX.API.Domain.AggregatesModel.AccountTypeAggregate.AccountType", "AccountType")
                        .WithMany("Accounts")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.AccountTypeAggregate.Faq", b =>
                {
                    b.HasOne("DefendX.API.Domain.AggregatesModel.AccountTypeAggregate.AccountType", "AccountType")
                        .WithMany("Faqs")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Rank", b =>
                {
                    b.HasOne("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Service", "Service")
                        .WithMany("Ranks")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense", b =>
                {
                    b.HasOne("DefendX.API.Domain.AggregatesModel.UserAggregate.User", "LastEditedBy")
                        .WithMany()
                        .HasForeignKey("LastEditedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");

                    b.HasOne("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense", "Sponsor")
                        .WithMany("Dependents")
                        .HasForeignKey("SponsorId");

                    b.HasOne("DefendX.API.Domain.AggregatesModel.UnitsAggregate.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.OwnsOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.DriverRestrictionsVO", "DriverRestrictions", b1 =>
                        {
                            b1.Property<int>("SofaLicenseId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<bool>("AutoJeep");

                            b1.Property<bool>("Glasses");

                            b1.Property<bool>("Motor");

                            b1.Property<bool>("MotorCycle");

                            b1.Property<bool>("OnBaseOnly");

                            b1.Property<bool>("Other");

                            b1.Property<bool>("Tdy");

                            b1.HasKey("SofaLicenseId");

                            b1.ToTable("SofaLicense");

                            b1.HasOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense")
                                .WithOne("DriverRestrictions")
                                .HasForeignKey("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.DriverRestrictionsVO", "SofaLicenseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.PersonalInformationVO", "PersonalInfo", b1 =>
                        {
                            b1.Property<int>("SofaLicenseId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime>("DoB");

                            b1.Property<string>("EyeColor")
                                .IsRequired()
                                .HasMaxLength(15);

                            b1.Property<string>("Gender")
                                .IsRequired()
                                .HasMaxLength(25);

                            b1.Property<string>("HairColor")
                                .IsRequired()
                                .HasMaxLength(15);

                            b1.Property<int>("Height");

                            b1.Property<int>("Weight");

                            b1.HasKey("SofaLicenseId");

                            b1.ToTable("SofaLicense");

                            b1.HasOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense")
                                .WithOne("PersonalInfo")
                                .HasForeignKey("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.PersonalInformationVO", "SofaLicenseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DefendX.API.Domain.AggregatesModel.ValueObjects.NameVO", "Name", b1 =>
                        {
                            b1.Property<int>("SofaLicenseId")
                                .ValueGeneratedOnAdd()
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<string>("MiddleInitial")
                                .HasMaxLength(1);

                            b1.HasKey("SofaLicenseId");

                            b1.ToTable("SofaLicense");

                            b1.HasOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense")
                                .WithOne("Name")
                                .HasForeignKey("DefendX.API.Domain.AggregatesModel.ValueObjects.NameVO", "SofaLicenseId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicenseIssue", b =>
                {
                    b.HasOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense")
                        .WithMany("Issues")
                        .HasForeignKey("SofaLicenseId");

                    b.HasOne("DefendX.API.Domain.AggregatesModel.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.SofaLicensePrintQueueAggregate.PrintQueue", b =>
                {
                    b.HasOne("DefendX.API.Domain.AggregatesModel.SofaLicenseAggregate.SofaLicense", "license")
                        .WithMany()
                        .HasForeignKey("LicenseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DefendX.API.Domain.AggregatesModel.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DefendX.API.Domain.AggregatesModel.UserAggregate.User", b =>
                {
                    b.HasOne("DefendX.API.Domain.AggregatesModel.AccountTypeAggregate.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");

                    b.HasOne("DefendX.API.Domain.AggregatesModel.ServiceAggregate.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId");

                    b.HasOne("DefendX.API.Domain.AggregatesModel.UnitsAggregate.Unit", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.OwnsOne("DefendX.API.Domain.AggregatesModel.UserAggregate.ContactInfoVO", "ContactInfo", b1 =>
                        {
                            b1.Property<long>("UserDodId");

                            b1.Property<string>("CommPhone")
                                .HasMaxLength(25);

                            b1.Property<string>("DsnPhone")
                                .HasMaxLength(25);

                            b1.Property<string>("Email")
                                .HasMaxLength(100);

                            b1.HasKey("UserDodId");

                            b1.ToTable("User");

                            b1.HasOne("DefendX.API.Domain.AggregatesModel.UserAggregate.User")
                                .WithOne("ContactInfo")
                                .HasForeignKey("DefendX.API.Domain.AggregatesModel.UserAggregate.ContactInfoVO", "UserDodId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });

                    b.OwnsOne("DefendX.API.Domain.AggregatesModel.ValueObjects.NameVO", "Name", b1 =>
                        {
                            b1.Property<long>("UserDodId");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(50);

                            b1.Property<string>("MiddleInitial")
                                .HasMaxLength(1);

                            b1.HasKey("UserDodId");

                            b1.ToTable("User");

                            b1.HasOne("DefendX.API.Domain.AggregatesModel.UserAggregate.User")
                                .WithOne("Name")
                                .HasForeignKey("DefendX.API.Domain.AggregatesModel.ValueObjects.NameVO", "UserDodId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
